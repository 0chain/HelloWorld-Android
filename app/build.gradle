plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    namespace 'org.zus.helloworld'
    compileSdk 33

    defaultConfig {
        applicationId "org.zus.helloworld"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.activity:activity:1.7.0'
    implementation 'androidx.activity:activity-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // live data
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    /* Adding our sdk `zcncore.aar` in `app/libs/` directory. */
    implementation fileTree(dir: 'libs', include: ['*.aar'])

    // gson
    implementation 'com.google.code.gson:gson:2.10.1'


    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    // Splash Screen
    implementation 'androidx.core:core-splashscreen:1.0.0'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Automatically extracts and sets the gosdk `zcncore.aar` into app libs directory.
task updategosdk {
    def gosdkPath = '/home/ubuntu/Downloads/0chain/zcncore/'
    def gosdkTarFilePath = "/$gosdkPath/zcncore-android.tar.gz"
    def gosdkZipFilePath = "/$gosdkPath/zcncore-android.zip"

    doFirst {
        println("Unzipping gosdk......... from path $gosdkZipFilePath")
        exec {
            commandLine 'unzip', '-o', gosdkZipFilePath, '-d', gosdkPath
            workingDir gosdkPath
        }

        println("Extracting zcncore.aar from tar file: " + gosdkTarFilePath)
        exec {
            commandLine 'tar', '-xvf', gosdkTarFilePath
            workingDir 'libs'
        }

        println("Moving the extracted zcncore.aar to libs directory")
        exec {
            commandLine 'mv', 'out/androidsdk/zcncore.aar', 'zcncore.aar'
            workingDir 'libs'
        }

        println("Deleting the folder out from libs directory")
        exec {
            commandLine 'rm', '-rf', 'out'
            workingDir 'libs'
        }

        println("Deleting the tar file from $gosdkTarFilePath directory")
        exec {
            commandLine 'rm', '-rf', gosdkTarFilePath
        }

        println("Deleting the zip file from $gosdkZipFilePath directory")
        exec {
            commandLine 'rm', '-rf', gosdkZipFilePath
        }
    }
    doLast {
        tasks.getByName('copyNativeSupportLibs').enabled = true
    }
}

// Run this task everytime you want to change or update the gosdk.
task copyNativeSupportLibs {
    dependsOn('updategosdk')
    doFirst {
        println("Unzipping native support libs.........")
        exec {
            commandLine 'unzip', '-o', 'zcncore.aar', '-d', 'unzipped_aar'
            workingDir 'libs'
        }

        println("Copying native libs to jniLibs directory ................")
        exec {
            commandLine 'cp', 'app/libs/unzipped_aar/jni/arm64-v8a/libgojni.so', 'app/src/main/jniLibs/arm64-v8a/'
            workingDir rootProject.projectDir
        }
        exec {
            commandLine 'cp', 'app/libs/unzipped_aar/jni/x86_64/libgojni.so', 'app/src/main/jniLibs/x86_64/'
            workingDir rootProject.projectDir
        }

        println("Remove the unzipped libs directory ................")
        exec {
            commandLine 'rm', '-rf', 'unzipped_aar'
            workingDir 'libs'
        }
    }
}
